{"data":{"site":{"siteMetadata":{"title":"MaxFun","author":"maxfang"}},"markdownRemark":{"id":"8cabbf1e-aa80-5632-9041-3788147b2fa1","excerpt":"A  design pattern  is a term used in software engineering for a general reusable solution to a commonly occurring problem in software design…","html":"<blockquote>\n<p>A <strong>design pattern</strong> is a term used in software engineering for a general reusable solution to a commonly occurring problem in software design.<br>設計模式在軟體工程上歸納出一般可復用的方案，用於解決軟體設計上常見的問題。）</p>\n</blockquote>\n<p>你可能會懷疑為什麼要學習設計模式？對我來說有什麼幫助？其實設計模式就很像你今天要從家裡到公司很有很多條路可以選擇，你可以搭捷運後再走路、騎腳踏車再轉公車，或是直接走路去公司，這就類似 Design pattern，不同的設計模式會依據你的情況來做選擇，當然也不是說一定要照著這些模式去做，只是這些設計模式都是軟體的資深人士經過測試與驗證的解決方案，當你學會這些之後，可以在開發架構上有更多的可讀性與重用性。</p>\n<p>設計模式通常分為三大類 Creational Design Patterns 、 Structural Design Patterns 、 Behavioral Design Patterns ，這篇會先從 <strong>Creational Design Patterns</strong> 開始說起。</p>\n<h2>Creational Design Patterns</h2>\n<p>顧名思義這個模式主要是創建對象，用控制創建物件的方式來解決問題，我們會討論以下這幾個模式 - <strong>Factory Pattern(工廠模式)、Prototype Pattern(原型模式)、Singleton Pattern(單例模式)</strong></p>\n<h3>Factory Pattern -</h3>\n<p>Factory Pattern 是其中一種創建物件的模式，他與其他的 Pattern 有個很不一樣的地方是，沒有明確說要建構式，你可以很簡單的用 JavaScript 物件就可以來實作。這種 Pattern 很常用於管理許多不同的物件，但他們卻有許多相似的特點。來看一下以下範例吧！</p>\n<p>首先我們想要有兩個不同的按鈕，一個是方形的另一個則是圓形的，接著我們創建一個工廠的物件，由他來負責要生產什麼樣的東西出來，我們可以依據傳入的 buttonType 來拿到我們要物件，並且可以用 instanceof 來知道他是從哪一個原型鏈上建構出來的。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">function</span> <span class=\"token function\">squareButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_shape <span class=\"token operator\">=</span> <span class=\"token string\">'square'</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">show</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">'Button is showing'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">circleButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_shape <span class=\"token operator\">=</span> <span class=\"token string\">'circle'</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">click</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">'You clicked circleButton'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">ButtonFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    ButtonFactory<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>buttonClass <span class=\"token operator\">=</span> squareButton\n    ButtonFactory<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createButton</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>buttonType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>buttonType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'square'</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buttonClass <span class=\"token operator\">=</span> squareButton\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'circle'</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buttonClass <span class=\"token operator\">=</span> circleButton\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buttonClass<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>el <span class=\"token operator\">=</span> <span class=\"token string\">'button'</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">this<span class=\"token punctuation\">.</span>buttonClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> buttonFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ButtonFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> submitWarnBtn <span class=\"token operator\">=</span> buttonFactory<span class=\"token punctuation\">.</span><span class=\"token function\">createButton</span><span class=\"token punctuation\">(</span><span class=\"token string\">'square'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> exitWarnBtn <span class=\"token operator\">=</span> buttonFactory<span class=\"token punctuation\">.</span><span class=\"token function\">createButton</span><span class=\"token punctuation\">(</span><span class=\"token string\">'circle'</span><span class=\"token punctuation\">)</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>submitWarnBtn <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">squareButton</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//true</span></code></pre></div>\n<h3>Prototype Pattern -</h3>\n<p>Prototype Pattern 是基於原型繼承(prototypal inheritance)的一種模式，這種模式對於JavaScript來說尤其的重要，因為 JavaScript 屬於 prototypal inheritance，本身提供了很好的優勢，就不需要像其他語言需要用其他方式來模擬。<br></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">const</span> robot <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        power<span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">fight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">'Come on fighting'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is running}`</span></span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> Mike <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>robot<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token string\">'Mike'</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>這邊用到JavaScript ECMAScript 5 新增的 <code class=\"language-text\">Object.create</code> 來實作，還不太懂 prototypal 的，可以看我的上一篇<a href=\"/maxfun.io/maxfun.io/javaScript-prototypal/\"><strong>JavaScript — “prototypal”</strong></a>。</p>\n<h3>Singleton Pattern</h3>\n<p>Singleton Pattern 只會有一個實例存在，如果當前沒有實例，則 new 出一個新的並回傳回去，如果有的話，則回傳當前實例回去，最好的例子就是 <code class=\"language-text\">mongoose</code> 。\nSingleton Pattern 在對於需要中心化控制的時候非常有用，一個很好的例子就是 database，這種模式可以確保整個創建刪除及修改的生命週期中，不會有任何資料的遺失。</p>\n<p>這個範例中我們有一個 Singleton class，首先我們\b用 new 創建了一個 mongo 建構物件，這時候我們已經有一個實例了，當我們再創建一個 mysql 出來的時候只會去 reference 已經存在的實例，之後回傳回去。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Database</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Database<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> Database<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    Database<span class=\"token punctuation\">.</span>instance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    Database<span class=\"token punctuation\">.</span>exists <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// usage</span>\n<span class=\"token keyword\">const</span> mongo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Database</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mongo<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// mongo</span>\n\n<span class=\"token keyword\">const</span> mysql <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Database</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mysql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mysql<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// mongo</span></code></pre></div>\n<p><strong>資料來源:</strong><br>\n<small>\n<a href=\"https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15\">- JavaScript Design Patterns.</a>\n</small>\n<br>\n<small>\n<a href=\"https://addyosmani.com/resources/essentialjsdesignpatterns/book/\">- Learning JavaScript Design Patterns.</a>\n</small></p>","frontmatter":{"title":"JavaScript Design Patterns -- Part 1","date":"July 31, 2019","image":"https://uploads.toptal.io/blog/image/125783/toptal-blog-image-1522333595770-14ba14a2f6099482fa9189f8764dd5ad.png"}}},"pageContext":{"slug":"/javascript-design-patterns-part1/","previous":{"fields":{"slug":"/javaScript-prototypal/"},"frontmatter":{"title":"JavaScript -- \"prototypal\""}},"next":{"fields":{"slug":"/implement-upload-graphQL/"},"frontmatter":{"title":"Implement image uploads in Apollo GraphQL"}}}}